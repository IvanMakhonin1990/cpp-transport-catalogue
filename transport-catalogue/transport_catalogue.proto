syntax = "proto3";

package transport_catalogue_serialize;


message Coordinates {
  double lat = 1;
  double lng = 2;
}

message Stop {
  string name = 1;
  Coordinates position = 2;
  int32 id = 3;
}

message Bus {
  string name = 1;
  repeated int32 stops = 2;
  bool is_roundtrip = 3;
  int32 id = 4;
  //double distance = 3;
  //double curvature = 4;
  //uint32 unique_stops = 5;
}

message DistanceInfo{
	int32 stop1Id = 1;
	int32 stop2Id = 2;
	double distance = 3;
}

message Rgba {
  uint32 red = 1;
  uint32 green = 2;
  uint32 blue = 3;
  double opacity = 4;
}

message Rgb {
  uint32 red = 1;
  uint32 green = 2;
  uint32 blue = 3;
}

message Color{
	oneof Value {
    string StringColor = 1;
    Rgb rgbColor = 2;
	Rgba rgbaColor = 3;
  }
}

message MapRendererInfo{
	double m_width = 1;
	double m_height = 2;
	double m_padding = 3;
	double m_line_width = 4;
	//stops circles radius
	double m_stop_radius = 5;
	//text size for buses
	uint32 m_bus_label_font_size = 6;
	//dx of text
	double m_bus_label_offset_dx = 7;
	//dy of text
	double m_bus_label_offset_dy = 8;
	//size of text
	uint32 m_stop_label_font_size = 9;
	//offset dx of text
	double m_stop_label_offset_dx = 10;
	//offset dy of text
	double m_stop_label_offset_dy = 11;
	Color m_underlayer_color = 12;
	//stroke-width
	double m_underlayer_width = 13;

	repeated Color m_color_palette = 14;

}

message TransportCatalogueInfo{
	repeated Bus buses = 1;
	repeated Stop stops = 2;
	repeated DistanceInfo distances = 3;
	int32 m_bus_wait_time = 4;
    int32 m_bus_velocity = 5;
}

message IncidenceList {
    repeated uint32 edge_id = 1;
}

message Edge {
    uint32 from = 1;
    uint32 to = 2;
    double weight = 3;
}

message Graph {
    repeated Edge edges = 1;
    repeated IncidenceList incidence_lists = 2;
}

message RouteInternalData {
    double weight = 1;
    oneof optional_prev_edge {
        uint32 prev_edge = 2;
		bool isNull = 3;
    }
}

message OptionalRouteInternalData {
    oneof optional_route_internal_data {
        RouteInternalData route_internal_data = 1;
		bool isNull = 2;
    }
}

message RoutesInternalData {
    repeated OptionalRouteInternalData routes_internal_data = 1;
}

message Router {
    repeated RoutesInternalData routes_internal_data = 1;
}


message StopById {
    uint32 id = 1;
    uint32 stop_id = 2;
}

message EdgeInfo {
    double m_is_wait = 1;
    int32 m_source = 2;
    int32 m_target = 3;
    int32 m_span = 4;
    int32 m_bus = 5;
 }

message TransportRouter {
    repeated StopById stop_by_id = 1;
    Graph graph = 2;
    Router router = 3;
	repeated EdgeInfo edgeInfos = 4;
}


message DataInfo{
	TransportCatalogueInfo transportCatalogueInfo = 1;
	MapRendererInfo mapRendererInfo = 2;
	TransportRouter router = 3;
}